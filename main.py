import asyncio
import os
from openpyxl import load_workbook
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from datetime import datetime

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
class ConversationState:
    WAITING_FOR_FIO = 1
    WAITING_FOR_BIRTHDATE = 2
    WAITING_FOR_SYMPTOMS = 3
    WAITING_FOR_TERM = 4  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–µ—Ä–º–∏–Ω–∞

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏–∑ Excel
def load_medical_terms():
    terms = {}
    try:
        file_path = os.path.join(os.path.dirname(__file__), "medical_terms.xlsx")
        wb = load_workbook(filename=file_path)
        sheet = wb.active
        for row in sheet.iter_rows(min_row=2, values_only=True):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            if row[0] and row[1]:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∏ —Ç–µ—Ä–º–∏–Ω, –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
                terms[row[0].lower()] = row[1]
        return terms
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel: {e}")
        return {
            "–≥–∏–ø–µ—Ä—Ç–æ–Ω–∏—è": "–ü–æ–≤—ã—à–µ–Ω–Ω–æ–µ –∞—Ä—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ. –û—Å–Ω–æ–≤–Ω—ã–µ —Å–∏–º–ø—Ç–æ–º—ã: –≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å, –≥–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–µ.",
            "–¥–∏–∞–±–µ—Ç": "–•—Ä–æ–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏–µ, —Å–≤—è–∑–∞–Ω–Ω–æ–µ —Å –Ω–∞—Ä—É—à–µ–Ω–∏–µ–º –æ–±–º–µ–Ω–∞ –≥–ª—é–∫–æ–∑—ã.",
            "–∞—Ä–∏—Ç–º–∏—è": "–ù–∞—Ä—É—à–µ–Ω–∏–µ —Å–µ—Ä–¥–µ—á–Ω–æ–≥–æ —Ä–∏—Ç–º–∞."
        }

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ—Ä–º–∏–Ω—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
MEDICAL_TERMS = load_medical_terms()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    name = user.first_name or "–¥—Ä—É–≥"
    greeting = f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§.–ò.–û. –ø–∞—Ü–∏–µ–Ω—Ç–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
    await update.message.reply_text(greeting)
    
    context.user_data['state'] = ConversationState.WAITING_FOR_FIO

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'state' not in context.user_data:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return
    
    current_state = context.user_data['state']
    
    if current_state == ConversationState.WAITING_FOR_FIO:
        context.user_data['fio'] = update.message.text
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
        context.user_data['state'] = ConversationState.WAITING_FOR_BIRTHDATE
    
    elif current_state == ConversationState.WAITING_FOR_BIRTHDATE:
        try:
            birth_date = datetime.strptime(update.message.text, "%d.%m.%Y").date()
            context.user_data['birth_date'] = birth_date
            await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞.")
            context.user_data['state'] = ConversationState.WAITING_FOR_SYMPTOMS
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
    
    elif current_state == ConversationState.WAITING_FOR_SYMPTOMS:
        context.user_data['symptoms'] = update.message.text
        await update.message.reply_text(
            f"–°–ø–∞—Å–∏–±–æ! –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:\n"
            f"–§–ò–û: {context.user_data['fio']}\n"
            f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {context.user_data['birth_date'].strftime('%d.%m.%Y')}\n"
            f"–°–∏–º–ø—Ç–æ–º—ã: {context.user_data['symptoms']}\n\n"
            f"–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ–∑–∂–µ."
        )
        del context.user_data['state']
    
    elif current_state == ConversationState.WAITING_FOR_TERM:
        term = update.message.text.lower()
        if term in MEDICAL_TERMS:
            await update.message.reply_text(f"üìñ {term.capitalize()}:\n{MEDICAL_TERMS[term]}")
        else:
            await update.message.reply_text("–¢–µ—Ä–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /terms –¥–ª—è —Å–ø–∏—Å–∫–∞.")
        context.user_data['state'] = None

async def terms_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        terms_list = "\n".join(f"‚Ä¢ {term}" for term in MEDICAL_TERMS.keys())
        await update.message.reply_text(
           # f"üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã:\n{terms_list}\n\n" 
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–∞, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ."
        )
        context.user_data['state'] = ConversationState.WAITING_FOR_TERM
    else:
        term = " ".join(context.args).lower()
        if term in MEDICAL_TERMS:
            await update.message.reply_text(f"üìñ {term.capitalize()}:\n{MEDICAL_TERMS[term]}")
        else:
            await update.message.reply_text("–¢–µ—Ä–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö:\n" + ", ".join(MEDICAL_TERMS.keys()))

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/terms - —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤\n"
        "/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )

async def main():
    TOKEN = '7903839198:AAHD7_C1qic4ic9Xc8ei53XVSOAoOmZ_Bi8'
    
    app = ApplicationBuilder().token(TOKEN).build()
    
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("terms", terms_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    
    try:
        await app.initialize()
        await app.start()
        await app.updater.start_polling()
        while True:
            await asyncio.sleep(1)
    except (KeyboardInterrupt, asyncio.CancelledError):
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è...")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        if app.updater:
            await app.updater.stop()
        if app:
            await app.stop()
            await app.shutdown()

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")
