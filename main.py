import asyncio
import os
from openpyxl import load_workbook
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
from datetime import datetime
import psycopg2

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
class ConversationState:
    WAITING_FOR_FIO = 1
    WAITING_FOR_BIRTHDATE = 2
    WAITING_FOR_SYMPTOMS = 3
    WAITING_FOR_TERM = 4
    WAITING_FOR_CODE = 5

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤
def load_medical_terms():
    terms = {}
    try:
        file_path = os.path.join(os.path.dirname(__file__), "medical_terms.xlsx")
        wb = load_workbook(filename=file_path)
        sheet = wb.active
        for row in sheet.iter_rows(min_row=2, values_only=True):
            if row[0] and row[1]:
                terms[row[0].lower()] = row[1]
        return terms
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ medical_terms.xlsx: {e}")
        return {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–¥–æ–≤ –ú–ö–ë
def load_icd_codes():
    codes = {}
    try:
        file_path = os.path.join(os.path.dirname(__file__), "codes.xlsx")
        wb = load_workbook(filename=file_path)
        sheet = wb.active
        for row in sheet.iter_rows(min_row=2, values_only=True):
            if row[0] and row[1]:
                codes[row[0].upper()] = row[1]
        return codes
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ codes.xlsx: {e}")
        return {}

MEDICAL_TERMS = load_medical_terms()
ICD_CODES = load_icd_codes()

def test_db_connection():
    try:
        conn = psycopg2.connect(
            dbname="postgres",
            user="myuser",
            password="polina",
            host="192.168.0.6",
            port="5432"
        )
        if conn.status == psycopg2.extensions.STATUS_READY:
            print("–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL!")
        conn.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")

# üîå –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –§–ò–û –ø–∞—Ü–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
def insert_patient_to_db(fio):
    try:
        parts = fio.split()
        if len(parts) != 3:
            print("–§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 3 —á–∞—Å—Ç–∏")
            return False

        last_name, first_name, middle_name = parts

        conn = psycopg2.connect(
            dbname="postgres",
            user="myuser",
            password="polina",
            host="192.168.0.6",
            port="5432"
        )
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO –ø–∞—Ü–∏–µ–Ω—Ç—ã (—Ñ–∞–º–∏–ª–∏—è, –∏–º—è, –æ—Ç—á–µ—Å—Ç–≤–æ) VALUES (%s, %s, %s);",
            (last_name, first_name, middle_name)
        )
        conn.commit()
        cursor.close()
        conn.close()
        print("–ü–∞—Ü–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ë–î.")
        return True

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞: {e}")
        return False

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = update.effective_user.first_name or "–¥—Ä—É–≥"
    await update.message.reply_text(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {name}! –ù–∞–ø–∏—à–∏—Ç–µ –§.–ò.–û. –ø–∞—Ü–∏–µ–Ω—Ç–∞.")
    context.user_data['state'] = ConversationState.WAITING_FOR_FIO

# üîÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if 'state' not in context.user_data:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start")
        return

    current_state = context.user_data['state']
    text = update.message.text.strip()

    if current_state == ConversationState.WAITING_FOR_FIO:
        if len(text.split()) != 3:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –§.–ò.–û. –ø–æ–ª–Ω–æ—Å—Ç—å—é (—Ç—Ä–∏ —Å–ª–æ–≤–∞).")
            return
        context.user_data['fio'] = text
        success = insert_patient_to_db(text)
        if success:
            await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø–∞—Ü–∏–µ–Ω—Ç–∞ (–î–î.–ú–ú.–ì–ì–ì–ì).")
            context.user_data['state'] = ConversationState.WAITING_FOR_BIRTHDATE
        else:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –§–ò–û. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    elif current_state == ConversationState.WAITING_FOR_BIRTHDATE:
        try:
            birth_date = datetime.strptime(text, "%d.%m.%Y").date()
            context.user_data['birth_date'] = birth_date
            await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –û–ø–∏—à–∏—Ç–µ —Å–∏–º–ø—Ç–æ–º—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞.")
            context.user_data['state'] = ConversationState.WAITING_FOR_SYMPTOMS
        except ValueError:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")

    elif current_state == ConversationState.WAITING_FOR_SYMPTOMS:
        context.user_data['symptoms'] = text
        await update.message.reply_text(
            f"–°–ø–∞—Å–∏–±–æ! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n"
            f"–§–ò–û: {context.user_data['fio']}\n"
            f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {context.user_data['birth_date'].strftime('%d.%m.%Y')}\n"
            f"–°–∏–º–ø—Ç–æ–º—ã: {context.user_data['symptoms']}"
        )
        context.user_data.clear()

    elif current_state == ConversationState.WAITING_FOR_TERM:
        term = text.lower()
        if term in MEDICAL_TERMS:
            await update.message.reply_text(f"üìñ {term.capitalize()}:\n{MEDICAL_TERMS[term]}")
        else:
            await update.message.reply_text("–¢–µ—Ä–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–π –∏–ª–∏ /terms –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
        context.user_data['state'] = None

    elif current_state == ConversationState.WAITING_FOR_CODE:
        code = text.upper()
        if code in ICD_CODES:
            await update.message.reply_text(f"üìò –ö–æ–¥ {code}:\n{ICD_CODES[code]}")
        else:
            await update.message.reply_text("–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, J45).")
        context.user_data['state'] = None

# /terms
async def terms_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ—Ä–º–∏–Ω, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ.")
        context.user_data['state'] = ConversationState.WAITING_FOR_TERM
    else:
        term = " ".join(context.args).lower()
        if term in MEDICAL_TERMS:
            await update.message.reply_text(f"üìñ {term.capitalize()}:\n{MEDICAL_TERMS[term]}")
        else:
            await update.message.reply_text("–¢–µ—Ä–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# /codes
async def codes_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ú–ö–ë-10 (–Ω–∞–ø—Ä–∏–º–µ—Ä, J45), —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫—É.")
        context.user_data['state'] = ConversationState.WAITING_FOR_CODE
    else:
        code = context.args[0].upper()
        if code in ICD_CODES:
            await update.message.reply_text(f"üìò –ö–æ–¥ {code}:\n{ICD_CODES[code]}")
        else:
            await update.message.reply_text("–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–≤–æ–¥–∞.")

# /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞\n"
        "/terms ‚Äî —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤\n"
        "/codes ‚Äî —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∫–æ–¥–æ–≤ –ú–ö–ë-10\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    
    TOKEN = '7903839198:AAHD7_C1qic4ic9Xc8ei53XVSOAoOmZ_Bi8'  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–º–µ–Ω–∏ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    app = ApplicationBuilder().token(TOKEN).build()
    

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("terms", terms_command))
    app.add_handler(CommandHandler("codes", codes_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
  

    try:
        await app.initialize()
        await app.start()
        await app.updater.start_polling()
        while True:
            await asyncio.sleep(1)
    except (KeyboardInterrupt, asyncio.CancelledError):
        print("\n–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    finally:
        await app.updater.stop()
        await app.stop()
        await app.shutdown()

if __name__ == '__main__':
    test_db_connection()
    asyncio.run(main())
